From: Alec Leamas <leamas.alec@gmail.com>
Date: Sat, 27 Oct 2018 02:14:21 -0400
Subject: Linux: plugin loading: Support data dirs in different locations.

Origin: upstream, https://github.com/OpenCPN/OpenCPN/commit/ab1d56dbc9e2
Applied-Upstream: 5.0.0

The second and final part of making it possible to load plugins
installed in e. g. /usr/local when the main opencpn installation
lives in /usr.

This is not transparent: it works if and only if the plugin uses
the new GetPluginDataDir() instead of GetPluginDir() to get the
location of the plugin data directory. However, I see no way
around this. Having the possibility is the best we can do.

By default, the patch locates data directories in ~/.local/share,
/usr/local and /usr. If the installation prefix isn't any of these,
it's also searched.
---
 include/ocpn_plugin.h | 25 ++++++++++++++++--
 src/pluginmanager.cpp | 73 ++++++++++++++++++++++++++++++++++++++++++---------
 2 files changed, 83 insertions(+), 15 deletions(-)

diff --git a/include/ocpn_plugin.h b/include/ocpn_plugin.h
index 715569e..9dfea60 100644
--- a/include/ocpn_plugin.h
+++ b/include/ocpn_plugin.h
@@ -50,7 +50,7 @@ class wxGLContext;
 //    PlugIns conforming to API Version less then the most modern will also
 //    be correctly supported.
 #define API_VERSION_MAJOR           1
-#define API_VERSION_MINOR           15
+#define API_VERSION_MINOR           16
 
 //    Fwd Definitions
 class       wxFileConfig;
@@ -1236,4 +1236,25 @@ extern DECL_EXP wxFont* FindOrCreateFont_PlugIn( int point_size, wxFontFamily fa
 
 extern DECL_EXP int PlugInGetMinAvailableGshhgQuality();
 extern DECL_EXP int PlugInGetMaxAvailableGshhgQuality();
-#endif //_PLUGIN_H_
+
+// API 1.16?
+//
+/**
+ * Return the plugin data directory for a given directory name.
+ *
+ * On Linux, the returned data path is an existing directory ending in
+ * "opencpn/plugins/<plugin_name>" where the last part is the plugin_name
+ * argument. The prefix part is one of the directories listed in the
+ * environment variable XDG_DATA_DIRS, by default
+ * ~/.local/share:/usr/local/share:/usr/share.
+ *
+ * On other platforms, the returned value is GetSharedDataDir() +
+ * "/opencpn/plugins/" + plugin_name (with native path separators)
+ * if that path exists.
+ *
+ * Return "" if no existing directory is found.
+ */
+extern DECL_EXP wxString GetPluginDataDir(const char* plugin_name);
+
+
+ #endif //_PLUGIN_H_
diff --git a/src/pluginmanager.cpp b/src/pluginmanager.cpp
index 772e665..7ddf81b 100644
--- a/src/pluginmanager.cpp
+++ b/src/pluginmanager.cpp
@@ -134,6 +134,9 @@ extern bool             g_bopengl;
 
 extern ChartGroupArray  *g_pGroupArray;
 
+static const char* const DEFAULT_DATA_DIRS =
+    "~/.local/share:/usr/local/share:/usr/share";
+
 static const char* const DEFAULT_PLUGIN_DIRS =
     "~/.local/lib/opencpn:/usr/local/lib/opencpn:/usr/lib/opencpn";
 
@@ -149,6 +152,58 @@ WX_DEFINE_LIST(Plugin_WaypointList);
 WX_DEFINE_LIST(Plugin_HyperlinkList);
 
 
+static wxString ExpandWord(wxString word)
+{
+#ifdef __linux__
+    wordexp_t we;
+    wordexp(word.mb_str(), &we, 0);
+    wxString tmp = wxString(we.we_wordv[0]);
+    wordfree(&we);
+    return tmp;
+#else
+    wxString tmp = wxExpandEnvVars(word);
+    return tmp;
+#endif
+}
+
+wxString GetPluginDataDir(const char* plugin_name)
+{
+    const char* const sharedDataLoc = *GetpSharedDataLocation();
+#ifdef __linux__
+    const char* const envdirs = getenv("XDG_DATA_DIRS");
+    wxString datadirs(envdirs ? envdirs : DEFAULT_DATA_DIRS);
+    if (envdirs == 0 && datadirs.Find(sharedDataLoc) == wxNOT_FOUND)
+        datadirs.Append(wxString(":") + sharedDataLoc);
+    wxLogMessage(_T("PlugInManager: Using data dirs from: ") + datadirs);
+#else
+    wxString datadirs(sharedDataLoc);
+#endif
+    static const wxString sep = wxFileName::GetPathSeparator();
+    wxStringTokenizer dirs(datadirs, ":");
+    while (dirs.HasMoreTokens()) {
+        wxString dir = ExpandWord(dirs.GetNextToken()) + sep;
+	dir +=
+            dir.EndsWith("opencpn") ? "plugins" : "opencpn" + sep + "plugins";
+        wxFileName tryDirName(dir);
+        wxDir tryDir;
+        if (!tryDir.Open(tryDirName.GetFullPath()))
+            continue;
+        wxString next;
+        bool more = tryDir.GetFirst(&next);
+        while (more) {
+            if (next == plugin_name) {
+		next = next.Prepend(tryDirName.GetFullPath() + sep);
+                wxLogMessage(_T("PlugInManager: using data dir: %s"), next);
+                return next;
+            }
+            more = tryDir.GetNext(&next);
+        }
+    }
+    wxLogMessage(_T("WarniÅ„g: no data directory found, using \"\""));
+    return "";
+}
+
+
 //    Some static helper funtions
 //    Scope is local to this module
 
@@ -320,22 +375,14 @@ bool PlugInManager::LoadAllPlugIns(const wxString &plugin_dir, bool load_enabled
 #else
     wxString dirs = plugin_dirs;
 #endif
-    wxLogMessage( _T("Plugins loading from ") + dirs);
+    wxLogMessage( _T("PlugInManager: plugins loading from ") + dirs);
     bool any_dir_loaded = false;
     wxStringTokenizer tokens(dirs, ":");
     while (tokens.HasMoreTokens()) {
         wxString dir = tokens.GetNextToken();
-        wxLogMessage(_T("PlugInManager: trying plugin dir: %s"), dir);
-#ifdef linux
-        wordexp_t we;
-        wordexp(dir.c_str(), &we, 0);
-	if (LoadPlugInDirectory(dir, load_enabled, b_enable_blackdialog))
-           any_dir_loaded = true;
-        wordfree(&we);
-#else
-	if (LoadPlugInDirectory(dir, load_enabled, b_enable_blackdialog))
-           any_dir_loaded = true;
-#endif
+        dir = ExpandWord(dir);
+        if (LoadPlugInDirectory(dir, load_enabled, b_enable_blackdialog))
+            any_dir_loaded = true;
     }
     return any_dir_loaded;
 }
@@ -1362,7 +1409,7 @@ PlugInContainer *PlugInManager::LoadPlugIn(wxString plugin_file)
 
     if(pic->m_pplugin)
     {
-        msg = _T("  ");
+        msg = _T("PlugInManager:  ");
         msg += plugin_file;
         wxString msg1;
         msg1.Printf(_T("\n              API Version detected: %d"), api_ver);
